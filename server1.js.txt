// server.js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Design = require('./models/Design');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// Routes
app.get('/api/designs', async (req, res) => {
    try {
        const designs = await Design.find().sort({ createdAt: -1 });
        res.json(designs);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

app.post('/api/designs', async (req, res) => {
    const design = new Design({
        name: req.body.name,
        description: req.body.description,
        materialType: req.body.materialType,
        status: req.body.status,
        neonElements: req.body.neonElements || false
    });

    try {
        const newDesign = await design.save();
        res.status(201).json(newDesign);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

app.put('/api/designs/:id', async (req, res) => {
    try {
        const updatedDesign = await Design.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true }
        );
        res.json(updatedDesign);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

app.delete('/api/designs/:id', async (req, res) => {
    try {
        await Design.findByIdAndDelete(req.params.id);
        res.json({ message: 'Design deleted successfully' });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});